define(["require", "exports", "jquery", "angularDependency", "lib/toastr", "util/value-proxy", "angularDependency", "angular/util/http-post-params-as-form.provider", "jquery", "lib/toastr", "util/value-proxy"], function (require, exports, $, angular, toastr, ValueProxy) {
    "use strict";
    exports.__esModule = true;
    var InstantAnswersCreditsInfo = (function () {
        function InstantAnswersCreditsInfo() {
        }
        return InstantAnswersCreditsInfo;
    }());
    exports.InstantAnswersCreditsInfo = InstantAnswersCreditsInfo;
    exports.AskExpertSubjects = ["Business", "Math", "Social Science", "Science", "History", "English", "Computer Science", "Psychology", "Humanities"];
    var AskExpertService = (function () {
        function AskExpertService($http, $injector, $rootScope, $sce, httpPostParamsAsFormConfig) {
            var _this = this;
            this.$http = $http;
            this.$injector = $injector;
            this.$rootScope = $rootScope;
            this.$sce = $sce;
            this.httpPostParamsAsFormConfig = httpPostParamsAsFormConfig;
            this.askAllowCount = undefined;
            this.instantAnswersCreditsInfoProxy = new ValueProxy({}, function () {
                return _this.$http.get("/member/ask/get-allowed-question-count.ajax")
                    .then(function (response) {
                    return {
                        askAllowCount: response.data['ask_expert_allowed_count'],
                        creditsPerMonth: response.data['credits_per_month']
                    };
                });
            });
            this.instantAnswersCreditsInfoProxy.getValue();
            this.questionResponseTimesProxy = new ValueProxy([], function () {
                return _this.$http.get("/member/ask/get-response-times.ajax")
                    .then(function (response) {
                    return response.data.reduce(function (times, value) {
                        times[value.category] = value.hours;
                        return times;
                    }, []);
                });
            });
            this.questionResponseTimesProxy.getValue();
        }
        AskExpertService.prototype.getQuestions = function (numQuestions) {
            var config = { params: { count: numQuestions } };
            return this.$http.get("/member/ask/get-recent-questions.ajax", config);
        };
        ;
        AskExpertService.prototype.getQuestionById = function (questionId) {
            var config = { params: { questionId: questionId } };
            return this.$http.get("/member/ask/get-question-by-id.ajax", config)
                .then(function (response) {
                return response.data;
            });
        };
        ;
        AskExpertService.prototype.getAllowedQuestionCount = function () {
            return this.$http.get("/member/ask/get-allowed-question-count.ajax");
        };
        ;
        AskExpertService.prototype.optIntoSms = function (phoneNumber) {
            var data = {
                phoneNumber: phoneNumber,
                allowSms: true
            };
            return this.$http.post('/member/profile/update-sms-notification-setting.ajax', data, this.httpPostParamsAsFormConfig);
        };
        ;
        AskExpertService.prototype.setQuestionContactInfo = function (phone, email, name, contactPreference) {
            var data = {
                phoneNumber: phone,
                emailAddress: email,
                name: name,
                contactPreference: contactPreference
            };
            return this.$http.post('/member/ask/set-question-contact.ajax', data, this.httpPostParamsAsFormConfig);
        };
        ;
        AskExpertService.prototype.askQuestion = function (question, subject, attachment, questionType) {
            var _this = this;
            var formData = new FormData();
            formData.append("category", subject);
            if (question && question != "") {
                formData.append("question", question);
            }
            if (attachment) {
                formData.append("attachment", attachment);
            }
            if (questionType) {
                formData.append("questionType", questionType);
            }
            return this.$http.post("/member/ask/create-instant-answer-question.ajax", formData, {
                headers: {
                    "Accept": "application/json",
                    "Content-Type": undefined
                },
                transformRequest: angular.identity
            }).then(function (data) {
                _this.notifyListenersOnQuestionAsked();
                return data;
            })["catch"](function (error) {
                toastr.error("An error occured when submitting. Please try again, or contact customer support if it continues.", 'Error', {
                    positionClass: 'toast-top-center'
                });
            });
        };
        ;
        AskExpertService.prototype.getRelatedLessons = function (search) {
            var justText = $('<p/>').html(search).text().replace(/(<([^>]+)>)/ig, "");
            var config = { params: { textSearchQuery: justText } };
            return this.$http.get("/member/ask/get-related-lessons.ajax", config)
                .then(function (response) {
                return response.data;
            });
        };
        ;
        AskExpertService.prototype.rateAnswer = function (questionId, helpful) {
            var data = {
                questionId: questionId,
                helpful: helpful
            };
            return this.$http.post('/member/ask/rate-answer.ajax', data, this.httpPostParamsAsFormConfig);
        };
        ;
        AskExpertService.prototype.saveFeedback = function (questionId, feedback) {
            var data = {
                questionId: questionId,
                feedbackText: feedback
            };
            return this.$http.post('/member/ask/give-answer-feedback.ajax', data, this.httpPostParamsAsFormConfig);
        };
        ;
        AskExpertService.prototype.getQuestionResponseTimes = function () {
            return this.$http.get("/member/ask/get-response-times.ajax")
                .then(function (response) { return response.data; });
        };
        AskExpertService.prototype.trustHtml = function (html) {
            return this.$sce.trustAsHtml(html);
        };
        ;
        AskExpertService.prototype.notifyListenersOnQuestionAsked = function () {
            if (this.$injector.has("studyGuideService")) {
                var studyGuideService = this.$injector.get("studyGuideService");
                if (studyGuideService.studyGuideNavAnswerDataProxy.isActive()) {
                    studyGuideService.studyGuideNavAnswerDataProxy.reloadValue();
                }
            }
        };
        AskExpertService.$inject = ["$http", "$injector", "$rootScope", "$sce", 'httpPostParamsAsFormConfig'];
        return AskExpertService;
    }());
    exports.AskExpertService = AskExpertService;
    var module = angular.module("ask-expert.service", ["study.http-post-params-as-form"])
        .service("AskExpertService", AskExpertService)
        .filter('htmlToPlaintext', function () {
        return function (text) { return text ? String(text).replace(/<[^>]+>/gm, '') : ''; };
    });
});

//# sourceMappingURL=ask-expert.service.js.map
