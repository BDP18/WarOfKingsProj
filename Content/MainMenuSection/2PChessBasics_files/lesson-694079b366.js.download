(function() {
	
	'use strict';
	var angularModules = [
		"academic-citation.module",
		"customCourse",
		"custom-course-dropdown-trigger.directive",
		"feedback-inline.directive",
		"globalModules",
		"go-to-tab-and-highlight.directive",
		"member-info.service",
		"reportAnErrorOverlay",
		"schoology.directive",
		"testimonial-list.controller",
		"ui.utils",
		"video-lesson-tracking.service",
		"placement-test-logged-out-modal.directive"
	];
	
	var injectedRequireDeps = [
		//Injected dependencies
		'jquery',
		'angularDependency',
		'util/remspect',
		'redesign/courseInfo',
		'redesign/courseNavigator',
		'redesign/textWrapImages',
		'redesign/lesson/transcript-click-handler',
	   'collegeAccelerator/placement-test-logged-out-modal.directive',
	 //this dependency is for wzrds-15650 ssoe: lazyLoadVideo-v1
		'video/remVideo'
	];
	
	var otherRequireDeps = [
		//Angular dependencies
		'lib/angular/ui-utils',
		'redesign/globalModules',
		
		//Other dependencies
		'academy/custom/customCourse',
		'academy/custom/custom-course-dropdown-trigger.directive',
		"academy/lesson/academic-citation.module",
		'academy/lesson/belowVideoTools',
		'bootstrapJs/bootstrap-tabpaths',
		'bootstrapJs/bootstrap-tabcollapse',
		"classroom/schoology.directive",
		"collegeAccelerator/placement-test-logged-out-modal.directive",
		"dashboard/askexpert/ask-expert.service",
		"feedback/feedback-inline.directive",
		"feedback/testimonial-list.controller",
		'lib/jquery/bootstrap/jasny',
		'lib/jquery-unveil/study.unveil',
		"lib/toastr",
		"member/info/member-info.service",
		"mobile-promotion/appDownloadBar",
		"redesign/favoriting",
		"redesign/relatedContentTabs",
		'support/report-an-error.directive',
		"util/virtualOnClick",
		"util/go-to-tab-and-highlight.directive",
		'video/video-lesson-tracking.service'
	];
	
	function addAngularDep(requireModule, angularModule) {
		angularModules.push(angularModule);
		otherRequireDeps.push(requireModule);
	}

	var memberDataElement = document.querySelector("#memberData");
	var isLoggedIn = false;
	if (memberDataElement) {
		var memberIdStr = memberDataElement.getAttribute("data-member-id");
		var memberId = parseInt(memberIdStr, 10);
		if (!isNaN(memberId)) {
			isLoggedIn = true;
		}
	}
	
	/**
	 * @param {function(...) : jQuery} $
	 * @param angular
	 * @param {Remspect} remspect
	 * @param {function(...,new:CourseInfo)} CourseInfo
	 * @param {function(...,new:CourseNavigator)} CourseNavigator
	 * @param {function(...,new:TextWrapImages)} TextWrapImages
	 * @param {PlacementTestModalController} PlacementTestModalController
	 * @returns {*}
	 */
	function init($, angular, remspect, CourseInfo, CourseNavigator, TextWrapImages, TranscriptClickHandler, PlacementTestModalController, RemVideo) {
		
		if (document.querySelector("#hasCodeExamples") != null) {
			require(["lib/code-prettify", "lib/code-prettify-r"], function(CodePrettify) {
				$(document).ready(function() {
					CodePrettify.prettyPrint();
				});
			});
		}
		
		if (document.querySelector("#hasMathEquation") != null) {
			require(["mathjax"], function(MathJax) {
				$(document).ready(function() {
					MathJax.Hub.Queue(["Typeset", MathJax.Hub, "additionalActivities"]);
				});
			});
		}
		
		var app = angular.module("lesson", angularModules);
		
		LessonController["$inject"] = ["$http", "$injector", "$scope", "$timeout", "MemberInfoService", "videoLessonTrackingService"];
		
		/**
		 * @constructor
		 */
		function LessonController($http, $injector, $scope, $timeout, memberInfoService, videoLessonTrackingService) {
			// find video element
			var videoElement = $('.videoContainer').find('div[data-wistiaid]');
			var wistiaId = videoElement.attr('data-wistiaid');
			var academyAssetId = $("#academyAssetId").val();
			var courseAcademyAssetId = $("#courseAcademyAssetId").val();
			
			this.lessonAcademyAssetId = academyAssetId;
			this.nextLessonAcademyAssetId = $("#nextLessonAcademyAssetId").val();

			this.searchResults = [];
			this.$scope = $scope;
			//this dependency is for wzrds-15650 ssoe: lazyLoadVideo-v1
			this.$timeout = $timeout;
			this.wistiaVideoIds = [];
			
			if (wistiaId) {
				videoLessonTrackingService.trackVideoPlays(wistiaId, academyAssetId);
			}
			
			$scope.$watch('lessonCtl.searchText', function (newValue, oldValue) {
				this.search(newValue);
			}.bind(this));
			
			//Instantiate service so that it does its thing
			if ($injector.has("TeacherVideoOverlayService")) {
				$injector.get("TeacherVideoOverlayService");
			}
			
			//Instantiate service so that it does its thing
			if ($injector.has("VideoCTAOverlayService")) {
				$injector.get("VideoCTAOverlayService");
			}
			
			initializeTranscriptTracking(memberInfoService, $http, academyAssetId, courseAcademyAssetId);
			
			$('[data-target="[data-video-paywall=\'selector\']"]').click(function()  {
				if (document.querySelector(".study-video__video")) {
					document.querySelector(".study-video__video").pause();
				}
			});
			
		}
		
		LessonController.prototype.loadVideo = function(){
			
			this.$timeout(function(){
				
				// select wistia embeds
				var embedElement = $('.just_in_time_wistia_embed');
				
				// using attr instead of data to ensure wistiaId is a String. rarely, there will be an id that is all numbers (no letters) and will be passed as an int. this causes js error
				var wistiaId = embedElement.attr('data-wistiaid');
				var options = embedElement.data('wistiaoptions');
				var features = embedElement.data();
				
				if(RemVideo) {
					if (this.wistiaVideoIds && this.wistiaVideoIds.indexOf(wistiaId) == -1) {
						this.wistiaVideoIds.push(wistiaId);
						var theVideo = new RemVideo(wistiaId, options, features, this);
						$("body").on("wistia-embed.ready", function(event, wistiaEmbedId) {
							if (theVideo.wistiaVideo && wistiaEmbedId == wistiaId) {
								theVideo.wistiaVideo.ready(function() {
									theVideo.wistiaVideo.play();
								});
							}
							else {
								this.$timeout(function() {
									if (theVideo.wistiaVideo && wistiaEmbedId == wistiaId) {
										theVideo.wistiaVideo.ready(function() {
											theVideo.wistiaVideo.play();
										});
									}
								}, 500);
							}
						}.bind(this));
					}
				}
				
				this.hasVideoBeenLoaded = true;
				
			}.bind(this), 10);
			
		}
		
  		LessonController.prototype.search = function(searchText) {
			if (remspect.isVariation("relatedContentPostRoll", "v1")) {
				if (searchText && searchText.length > 1) {
					$.ajax({
						type: 'GET',
						url: '/search/text/lessons.ajax?searchPattern=' + searchText
					}).done(function(data) {
						var cloudItems = $(".cloud-item");
						cloudItems.addClass("hidden");
						var searchResults = [];
						data.results.forEach(function(academyAsset) {
							this.addAcademyAssetToSearchResults(academyAsset, searchResults);
						}.bind(this));
						this.searchResults = searchResults;
						if (this.searchResults.length < 1) {
							cloudItems.removeClass("hidden");
							$(".postroll-relevant-lesson-row").addClass("hidden");
						}
						else {
							cloudItems.addClass("hidden");
							$(".postroll-relevant-lesson-row").removeClass("hidden");
						}
						this.$scope.$apply();
					}.bind(this));
				}
				else {
					$(".cloud-item").removeClass("hidden");
					$(".postroll-relevant-lesson-row").addClass("hidden");
				}
			}
		};
		
		LessonController.prototype.addAcademyAssetToSearchResults = function(academyAsset, searchResults) {
			if (academyAsset.academyAssetId == this.lessonAcademyAssetId || academyAsset.academyAssetId == this.nextLessonAcademyAssetId) {
				// do nothing, we want to exclude these lessons
			} else if (academyAsset.type == 'LESSON') {
				var timeString = Math.floor(academyAsset.videoDuration / 60) + ":" + ("0" + (academyAsset.videoDuration % 60)).slice(-2);
				academyAsset.typeName = 'Video (' + timeString + ')';
				searchResults.push(academyAsset);
			}
			else if (academyAsset.type == 'TEXT') {
				academyAsset.previewImageUrl = '/images/reDesign/defaultTextPreview.png';
				academyAsset.typeName = 'Text Lesson';
				searchResults.push(academyAsset);
			}
			else if (academyAsset.type == 'FLASHCARD_SET') {
				academyAsset.previewImageUrl = '/images/reDesign/flashcardsPreview.png';
				academyAsset.typeName = 'Flashcards';
				searchResults.push(academyAsset);
			}
		};
		
		LessonController.prototype.setTestPrepPlanMode = function (courseId, mode) {
			$.post("/member/metadata/set-test-prep-plan-mode.ajax?courseId=" + courseId + "&testPrepMode=" + mode)
			.then(function() {
				window.scroll(0,0);
				window.location.reload();
			});
		};
		
		
		app.controller("LessonController", LessonController);
		
		new TranscriptClickHandler().initialize();
		
		$(document).ready(function() {
			var toggleViewHideText = $("[data-toggle-view-hide-text]");
			var toggleViewHideTarget = toggleViewHideText.attr("data-target");
			var sameTargetDifEl = $("[data-toggle-view-hide-text][data-target='"+toggleViewHideTarget+"']");
			
			toggleViewHideText.on("click",function(){
				sameTargetDifEl.each(function(i, el){
					if(el.text.indexOf("View") > -1){
						el.text = el.text.replace("View", "Hide");
					} else if(el.text.indexOf("Hide") > -1){
						el.text = el.text.replace("Hide", "View");
					}
				});
			});
			
			
			if (document.querySelector("[data-google-member-account-was-linked]")) {
				require(['authentication/google-member-link-notifier'], function(GoogleMemberLinkNotifierModule){
					GoogleMemberLinkNotifierModule.GoogleMemberLinkNotifier.showNotificationIfAccountWasLinked();
				});
			}
			
			$(document.body).on("show.bs.offcanvas", function(e) {
				$("body").css("position", "fixed");
			});
			
			$(document.body).on("hidden.bs.offcanvas", function(e) {
				$("body").css("position", "relative");
			});

			if (document.getElementById("courseInfoTab")) {
				var courseInfo = new CourseInfo($('#courseInfoTab').data('coursename'));
			}

			var courseNavigator = new CourseNavigator($('[data-coursenavigator]'), !!document.querySelector("[data-no-mobile-course-nav]"));
			var textWrapImages = new TextWrapImages($('.wikiContent'));
			
			var lastImgAlt = $('.wikiContent .imageplugin:last img').attr('alt');
			if (lastImgAlt && lastImgAlt.toLowerCase().indexOf('infographic') >= 0) {
				$('.wikiContent .imageplugin:last').addClass('full-width-img')
			}
			
			$("*[data-hide-enroll]").on("click", function() {
				var academyAssetId = this.getAttribute('data-hide-enroll');
				$.ajax({
					type: 'POST',
					url: '/member/enrollment/unenroll.ajax',
					data: {
						courseId: academyAssetId
					}
				});
				$('.doNotShow').toggleClass('hide');
			});

			var angularModules = ["lesson"];
			angularModules.push("study.mobile-promotion.download-banner");

			var scriptElement = document.querySelector("script[data-page-type]");
			var pageType = scriptElement.getAttribute("data-page-type");
			if (pageType === 'ACADEMY_ARTICLE') {
				angular.bootstrap($("body"), angularModules.concat(["prong-filter.controller"]));
			}else{
				angular.bootstrap($("body"), angularModules);
			}
			
			$('#articlesTabCollapse').tabCollapse();
			$('#articlesTabCollapse-accordion .panel-collapse').removeClass('in');
			$('#articlesTabCollapse-accordion .panel-heading a').addClass('collapsed');
			
			$("#mini-course-progress__test-prep-carousel").carousel({
				interval: 4000,
				wrap: false,
				keyboard: false
			});
			
			$(".tutor-banner__close").on("click", function(){
				hideTutorBanner();
			})
		});
		
		function hideTutorBanner(){
			$(".tutor-banner").hide();
			$.cookie("hideTutorBanner","true",{path:"/"})
		}
		
		function initializeTranscriptTracking(memberInfoService, $http, lessonId, courseId) {
			memberInfoService.memberInfoProxy.getValue().then(function(memberInfo) {
				if (memberInfo.isLoggedIn) {
					require(["util/ongoing-visibility-tracker", "eventLogging"], function(OngoingVisibilityTracker, eventLogging) {
						var transcriptTracker = new OngoingVisibilityTracker(document.querySelector("#transcriptMain"));
						
						function hasActuallyReadTranscript(secondsVisibleArray) {
							var percentOfTranscriptRead = secondsVisibleArray.filter(function(value) { return value > 7 }).length;
							if (percentOfTranscriptRead >= 70) {
								markAsRead(secondsVisibleArray);
								transcriptTracker.unregisterListener(hasActuallyReadTranscript);
							}
						}
						
						var attemptsMax = 5;
						var attemptsLeft = attemptsMax;
						function markAsRead(secondsVisibleArray) {
							var config = {params: {
									lessonId: lessonId,
									courseId: courseId
								}};
							$http.post("/academy/lesson/mark-lesson-as-read.ajax", secondsVisibleArray, config)
							.catch(function() {
								attemptsLeft--;
								if (attemptsLeft) {
									setTimeout(function () {
										markAsRead(secondsVisibleArray);
									}, Math.pow(2, attemptsMax - attemptsLeft) * 1000);
								}
							});
						}
						
						transcriptTracker.registerListener(hasActuallyReadTranscript);
						
						var lastEventLoggedTimestamp = new Date(0).getTime();
						var startWarehouseTracking = new Date().getTime();
						function sendDataToWarehouse(secondsReadArray, element) {
							var now = new Date().getTime();
							var forceQuit = (now - startWarehouseTracking) >= 10 * 60 * 1000;
							if (forceQuit) {
								transcriptTracker.unregisterListener(sendDataToWarehouse);
							}
							if (forceQuit || (now - lastEventLoggedTimestamp) >= 20 * 1000) {
								var loggableEvent = new eventLogging.LoggableEvent("transcriptRead");
								eventLogging.addElementInfoToEventDetail(loggableEvent, element);
								loggableEvent.secondsVisibleByPercent = secondsReadArray;
								if (forceQuit) {
									loggableEvent.forceQuit = true;
								}
								eventLogging.queueEvent(loggableEvent);
								lastEventLoggedTimestamp = now;
							}
						}
						
						transcriptTracker.registerListener(sendDataToWarehouse);
					});
				}
			});
			
		}
		
		app.directive('errSrc', function() {
			return {
				link: function(scope, element, attrs) {
					element.bind('error', function() {
						if (attrs.src != attrs.errSrc) {
							attrs.$set('src', attrs.errSrc);
						}
					});
				}
			}
		});

		$('#hiddenVideoTools').on('hide.bs.collapse', function (e) {
			e.preventDefault();
		});

		$(".tocShowLink").click(function () {
			$(".longformToc").toggleClass("in");
		});
		
		return app;
	}
	
	require(['util/remspect'], function(remspect) {
		var scriptElement = document.querySelector("script[data-page-type]");
		var pageType = scriptElement.getAttribute("data-page-type");
		var hasQualaroo = false;
		
		// Other dependencies
		if (pageType === 'ACADEMY_ARTICLE') {
			otherRequireDeps.push("redesign/directory/prong-filter.controller");
		}
		else if (pageType === 'ARTICLE' || pageType === 'PHRASE') {
			if (!remspect.isControl("qualarooArticle")) {
				otherRequireDeps.push('util/qualaroo');
				hasQualaroo = true;
			}
			otherRequireDeps.push("redesign/dropDownSearch");
		}
		
		if (!remspect.isControl("lessonQualaroo") && !hasQualaroo) {
				otherRequireDeps.push('util/qualaroo');
				hasQualaroo = true;
		}
		
		if (!remspect.isControl("qualarooHeaderSurvey") && !hasQualaroo) {
				otherRequireDeps.push('util/qualaroo');
				hasQualaroo = true;
		}
		
		if (remspect.isVariation("lessonSurvey", "v1") && !hasQualaroo) {
			otherRequireDeps.push('util/qualaroo');
			hasQualaroo = true;
			
			window._kiq = window._kiq || [];
			
			if (window.additionalUserProperties){
				window.additionalUserProperties.testVar = "objectionHandlingVarA"
			} else {
				window.additionalUserProperties = {};
				window.additionalUserProperties.testVar = "objectionHandlingVarA"
			}
			
		} else if (remspect.isVariation("lessonSurvey", "v2") && !hasQualaroo){
			otherRequireDeps.push('util/qualaroo');
			hasQualaroo = true;
			
			window._kiq = window._kiq || [];
			
			if (window.additionalUserProperties) {
				window.additionalUserProperties.testVar = "objectionHandlingVarB"
			}
			else {
				window.additionalUserProperties = {};
				window.additionalUserProperties.testVar = "objectionHandlingVarB"
			}
		}
		
		addAngularDep("academy/lesson/academic-citation.module","academic-citation.module");
		
		if (remspect.isVariation("relatedContentPostRoll", "v1")) {
			addAngularDep("redesign/directives/word-cloud.directive", "word-cloud.directive");
		}
		
		if ((document.querySelector("teacher-quiz-game-start") != null) || (document.querySelector("teacher-quiz-game-start-button") != null))
		{
			addAngularDep("quizGame/teacher-quiz-game.module", "teacher-quiz-game.module")
		}

		if (document.querySelector("study-video") != null || document.querySelector("study-video-lazy") != null) {
			addAngularDep("video/study-video.directive", "study-video.directive");
		}
		
		if(document.querySelectorAll('.video-speed').length > 0){
			addAngularDep("academy/lesson/video-speed.controller","video-speed.controller");
		}
		
		if (document.querySelector("interview-recruiting") != null) {
			addAngularDep('interview/interview-recruiting.directive', 'interview-recruiting.directive');
		}

		if (document.querySelector("google-classroom-share") != null) {
			addAngularDep("classroom/share/google/google-classroom-share.directive", "google-classroom-share.directive");
		}
		
		if (document.querySelector("assignment-creation-inline") != null) {
			addAngularDep("classroom/teacher/assignments/create/assignment-creation-inline.directive", "assignment-creation-inline.directive");
		}
		
		if (document.querySelector("assignment-creation-link") != null) {
			addAngularDep("classroom/teacher/assignments/create/assignment-creation-link.directive", "assignment-creation-link.directive");
		}
		
		if (document.querySelector("course-project-submission") != null) {
			addAngularDep("academy/collegeAccelerator/course-project-submission.directive", "course-project-submission.directive");
		}
		
		if (document.querySelector("instant-answers-pop-up") != null) {
			addAngularDep("redesign/lesson/instantAnswersPopUp", "instantAnswersPopUp");
		}
		else if (document.querySelector("#questionsTab instant-answers-module") != null) {
			addAngularDep("redesign/lesson/instantAnswersPopUp", "instantAnswersPopUp");
		}
		
		if(document.querySelector("[open-study-guide-save-modal]")!=null){
			addAngularDep("member/studyGuide/study-guide-save.controller","study-guide-save.controller");
		}
		
		if(document.querySelector("study-typeahead") !== null){
			addAngularDep("redesign/typeahead.controller","typeahead.controller");
		}
		
		if(document.querySelector(".freshchat-tutor-drawer") != null){
			otherRequireDeps.push("tutor/tutor-chat-form");
		}
		
		//ideally these would have more specific criteria
		if (isLoggedIn) {
			addAngularDep("redesign/lesson/highlightNotes", "highlightNotes");
			addAngularDep("courseProgress/course-progress.controller", "course-progress.controller");
		}
		
		addAngularDep("registration/reg-form/reg-form.service", "reg-form.service");

		require(injectedRequireDeps.concat(otherRequireDeps), init);
	});
})();


