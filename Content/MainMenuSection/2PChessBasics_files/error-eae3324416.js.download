"use strict";
var GlobalUtils = (function () {
    function GlobalUtils() {
        this.blackListedErrorLimit = 3;
        this.logLimit = 100;
        this.sentErrorMap = {};
    }
    GlobalUtils.prototype.getRequestGuid = function () {
        var requestGuidElement = document.querySelector("meta[name=requestGuid]");
        var requestGuid;
        if (typeof requestGuidElement === 'undefined' || !requestGuidElement) {
            requestGuidElement = document.getElementById("requestGuid");
            requestGuid = requestGuidElement ? requestGuidElement.value : "";
        }
        else {
            requestGuid = requestGuidElement.getAttribute("content");
        }
        return requestGuid;
    };
    GlobalUtils.prototype.generateGuid = function () {
        Date.now = Date.now || function () {
            return +new Date();
        };
        var d = Date.now();
        return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c === 'x' ? r : (r & 0x7 | 0x8)).toString(16);
        });
    };
    GlobalUtils.prototype.requireConfigError = function (event) {
        var exception = {};
        exception.message = "error loading require config file";
        exception.sourceJavascript = '<remilon:versionify resourceLocation="${jsHost}" path="/js/requireConfig.js" />';
        exception.lineNumber = 0 + ':' + 0;
        this.logError(exception, "fileload");
    };
    GlobalUtils.prototype.requireError = function (event) {
        var exception = {};
        exception.message = "require.js failed to load";
        exception.sourceJavascript = "//cdnjs.cloudflare.com/ajax/libs/require.js/2.3.2/require.min.js";
        exception.lineNumber = 0 + ':' + 0;
        this.logError(exception, "require");
    };
    GlobalUtils.prototype.onError = function (message, url, lineNumber, colNumber, error) {
        var exception = (error != null) ? error : {};
        exception.message = message;
        exception.sourceJavascript = url;
        exception.lineNumber = lineNumber;
        this.logError(exception, "javascriptError-preEventTracking");
    };
    GlobalUtils.prototype.logError = function (exception, type) {
        var loggableEvent = {};
        try {
            var urlCapture = /\((.+?):(\d+):(\d+)/g;
            var matchUrl = urlCapture.exec(exception.stack);
            if (matchUrl && matchUrl.length == 4) {
                var url = matchUrl[1];
                var line = matchUrl[2];
                var col = matchUrl[3];
                loggableEvent.sourceJavascript = url;
                loggableEvent.lineNumber = line + ':' + col;
            }
            else {
                loggableEvent.sourceJavascript = exception.sourceJavascript;
                loggableEvent.lineNumber = exception.lineNumber;
            }
        }
        catch (e) {
            loggableEvent.sourceJavascript = exception.sourceJavascript;
            loggableEvent.lineNumber = exception.lineNumber;
        }
        loggableEvent.eventType = "javascriptError";
        loggableEvent.message = this.truncateText(exception.message);
        loggableEvent.url = window.location.href;
        loggableEvent.name = exception.name;
        loggableEvent.stacktrace = this.truncateText(exception.stack);
        loggableEvent.javascriptUUID = this.generateGuid();
        loggableEvent.pageRequestGuid = this.getRequestGuid();
        loggableEvent.type = type;
        loggableEvent.javascriptTimestamp = new Date().getTime();
        var hashCode = this.computeErrorHashCode(loggableEvent);
        if (this.shouldLogError(loggableEvent, hashCode)) {
            this.markErrorAsSent(loggableEvent, hashCode);
            this.handleErrorEvent(loggableEvent);
        }
    };
    GlobalUtils.prototype.handleErrorEvent = function (loggableEvent) {
        this.logLimit--;
        var request = new XMLHttpRequest();
        request.open("POST", "/eventLogger/eventLog.ajax");
        request.setRequestHeader("Content-Type", "application/json");
        request.send(JSON.stringify([loggableEvent]));
    };
    GlobalUtils.prototype.markErrorAsSent = function (loggableEvent, errorHashCode) {
        if (this.isBlackListedError(loggableEvent) && this.blackListedErrorLimit > 0) {
            this.blackListedErrorLimit--;
        }
        this.sentErrorMap[errorHashCode] = true;
    };
    GlobalUtils.prototype.shouldLogError = function (loggableEvent, errorHashCode) {
        if (this.logLimit <= 0) {
            return false;
        }
        if (this.isBlackListedError(loggableEvent) && this.blackListedErrorLimit <= 0) {
            return false;
        }
        if (this.sentErrorMap[errorHashCode]) {
            return false;
        }
        return true;
    };
    GlobalUtils.prototype.isBlackListedError = function (loggableEvent) {
        return loggableEvent.message.match(/(script error|mismatched anonymous define)/i);
    };
    GlobalUtils.prototype.truncateText = function (text) {
        return (text && text.length > 4000) ? text.substring(0, 4000) + "....[truncated]" : text;
    };
    GlobalUtils.prototype.computeErrorHashCode = function (loggableEvent) {
        var hashString = loggableEvent.message + " | " + loggableEvent.sourceJavascript + " | " + loggableEvent.lineNumber;
        return this.simpleHashCode(hashString);
    };
    GlobalUtils.prototype.simpleHashCode = function (text) {
        var h = 0;
        for (var i = 0; i < text.length; i++) {
            h = (h << 5) - h + text.charCodeAt(i) | 0;
        }
        return h;
    };
    return GlobalUtils;
}());
var globalUtils = new GlobalUtils();
window.globalUtils = globalUtils;
window.onerror = function (message, url, lineNumber, colNumber, error) {
    globalUtils.onError(message, url, lineNumber, colNumber, error);
    return false;
};

//# sourceMappingURL=error.js.map
